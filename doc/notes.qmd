---
title: "notes"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a
finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that
includes both content and the output of embedded code. You can embed
code like this:

```{r}
 
```

styler is a built in dependency as we almost only use it in the console.
Since it is built in we use 'suggest' to run styler. If you want to
style everything then run styler::style_dir(). For R markdown we change
canonical visual mode markdown to "true" and automatic text wrapping to
"column" which by default has 72. in your Descriptions file you will
have Imports for built in dependencies, "suggests" for workflow
dependencies and "Depends" for something like tidyverse that includes
multiple packages and functions.

Each R script is split up into sections (e.g. with RStudio's 'Insert
Section' with Ctrl-Shift-R) by utility or purpose. You can use the
'Document Outline' (Ctrl-Shift-O) to see the sections and functions.

\
Code used in session 1:

usethis::use_package("stringr") usethis::use_package("readxl")
usethis::use_package("dplyr") usethis::use_package("tidyr")
usethis::use_package("snakecase") usethis::use_package("here")
usethis::use_package("fs") usethis::use_package("readr")
usethis::use_usethis() use_package("usethis", "suggests")
use_package("styler", "suggests") styler::style_dir()

Session 2:

-   use control + alt + i to insert a code chunk or use the palette

-   across: given these columns do this action

-   use control + shit + M to insert pipe

-   .x is a placeholder

-   Function to analyse lipidomics with basic statistics:\
    lipidomics \|\> group_by(metabolite) \|\> summarise(across( value,
    list( mean = mean, sd = sd ) )) \|\> mutate(across(
    where(is.numeric), \~ round(.x, digits = 1) ))

-   Use targets::tar_make() to run the pipeline with made targets

-   There is a specific way to tell the targets function to update the
    entire pipeline if changes are made to the data that you load in. \
    Use tar_target(name = file, command = "data/lipidomics.csv", format
    = "file") to tell it that this is a file. You don't need to use
    here::here anymore because inside the targets package it already
    knows where to look for the file.

-   If targets says:

    ```         
    âœ” skipped target df_stats_by_metabolite
    ```

    it skips to rerun df_stats_by_metabolite because the file hasn't
    changed.

-   If you want to see what has changed since last time you run the
    pipeline use. If it returns 0 no changes has been made.

    ```         
    targets::tar_outdated()
    ```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is
displayed).
